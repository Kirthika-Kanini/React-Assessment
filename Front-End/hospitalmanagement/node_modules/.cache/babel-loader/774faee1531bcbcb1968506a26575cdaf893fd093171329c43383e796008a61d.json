{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport image1 from './image-1.png';\nimport image2 from './image-2.png';\nimport './Register.css';\nimport { toast } from 'react-toastify';\nimport './ToastStyles.css';\nimport { Link, useNavigate } from 'react-router-dom';\nfunction Register() {\n  _s();\n  const navigate = useNavigate();\n\n  // Rest of the code...\n\n  const handlesubmit = e => {\n    e.preventDefault();\n    let regobj = {\n      name,\n      password,\n      email,\n      phone,\n      country,\n      address,\n      gender,\n      role\n    };\n    console.log(JSON.stringify(regobj));\n    if (IsValidate()) {\n      fetch('https://localhost:7224/api/Users', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(regobj)\n      }).then(res => {\n        toast.success('Registered Successfully', {\n          toastStyle: {\n            background: 'green'\n          },\n          bodyStyle: {\n            fontSize: '5px'\n          },\n          progressStyle: {\n            background: 'white'\n          }\n        });\n\n        // Check the user's role and navigate accordingly\n        if (role === 'patient') {\n          navigate('/login');\n        } else if (role === 'doctor') {\n          navigate('/home');\n        }\n      }).catch(err => {\n        toast.error('Failed: ' + err.message, {\n          toastStyle: {\n            background: 'red'\n          },\n          bodyStyle: {\n            fontSize: '16px'\n          },\n          progressStyle: {\n            background: 'white'\n          }\n        });\n      });\n    }\n  };\n\n  // Rest of the code...\n}\n_s(Register, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Register;\nex;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useEffect","image1","image2","toast","Link","useNavigate","Register","_s","navigate","handlesubmit","e","preventDefault","regobj","name","password","email","phone","country","address","gender","role","console","log","JSON","stringify","IsValidate","fetch","method","headers","body","then","res","success","toastStyle","background","bodyStyle","fontSize","progressStyle","catch","err","error","message","_c","ex","$RefreshReg$"],"sources":["C:/Kanini Software Solutions/React(BigBang)/Front-End/hospitalmanagement/src/Component/Register/Register.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport image1 from './image-1.png';\r\nimport image2 from './image-2.png';\r\nimport './Register.css';\r\nimport { toast } from 'react-toastify';\r\nimport './ToastStyles.css'; \r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nfunction Register() {\r\n  const navigate = useNavigate();\r\n\r\n  // Rest of the code...\r\n\r\n  const handlesubmit = (e) => {\r\n    e.preventDefault();\r\n    let regobj = { name, password, email, phone, country, address, gender, role };\r\n    console.log(JSON.stringify(regobj));\r\n    if (IsValidate()) {\r\n      fetch('https://localhost:7224/api/Users', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(regobj),\r\n      })\r\n        .then((res) => {\r\n          toast.success('Registered Successfully', {\r\n            toastStyle: {\r\n              background: 'green',\r\n            },\r\n            bodyStyle: {\r\n              fontSize: '5px',\r\n            },\r\n            progressStyle: {\r\n              background: 'white',\r\n            },\r\n          });\r\n\r\n          // Check the user's role and navigate accordingly\r\n          if (role === 'patient') {\r\n            navigate('/login');\r\n          } else if (role === 'doctor') {\r\n            navigate('/home');\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          toast.error('Failed: ' + err.message, {\r\n            toastStyle: {\r\n              background: 'red',\r\n            },\r\n            bodyStyle: {\r\n              fontSize: '16px',\r\n            },\r\n            progressStyle: {\r\n              background: 'white',\r\n            },\r\n          });\r\n        });\r\n    }\r\n  };\r\n  \r\n  // Rest of the code...\r\n}\r\nex"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAO,gBAAgB;AACvB,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAO,mBAAmB;AAC1B,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AAEpD,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGH,WAAW,CAAC,CAAC;;EAE9B;;EAEA,MAAMI,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAIC,MAAM,GAAG;MAAEC,IAAI;MAAEC,QAAQ;MAAEC,KAAK;MAAEC,KAAK;MAAEC,OAAO;MAAEC,OAAO;MAAEC,MAAM;MAAEC;IAAK,CAAC;IAC7EC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACZ,MAAM,CAAC,CAAC;IACnC,IAAIa,UAAU,CAAC,CAAC,EAAE;MAChBC,KAAK,CAAC,kCAAkC,EAAE;QACxCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEN,IAAI,CAACC,SAAS,CAACZ,MAAM;MAC7B,CAAC,CAAC,CACCkB,IAAI,CAAEC,GAAG,IAAK;QACb5B,KAAK,CAAC6B,OAAO,CAAC,yBAAyB,EAAE;UACvCC,UAAU,EAAE;YACVC,UAAU,EAAE;UACd,CAAC;UACDC,SAAS,EAAE;YACTC,QAAQ,EAAE;UACZ,CAAC;UACDC,aAAa,EAAE;YACbH,UAAU,EAAE;UACd;QACF,CAAC,CAAC;;QAEF;QACA,IAAId,IAAI,KAAK,SAAS,EAAE;UACtBZ,QAAQ,CAAC,QAAQ,CAAC;QACpB,CAAC,MAAM,IAAIY,IAAI,KAAK,QAAQ,EAAE;UAC5BZ,QAAQ,CAAC,OAAO,CAAC;QACnB;MACF,CAAC,CAAC,CACD8B,KAAK,CAAEC,GAAG,IAAK;QACdpC,KAAK,CAACqC,KAAK,CAAC,UAAU,GAAGD,GAAG,CAACE,OAAO,EAAE;UACpCR,UAAU,EAAE;YACVC,UAAU,EAAE;UACd,CAAC;UACDC,SAAS,EAAE;YACTC,QAAQ,EAAE;UACZ,CAAC;UACDC,aAAa,EAAE;YACbH,UAAU,EAAE;UACd;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACN;EACF,CAAC;;EAED;AACF;AAAC3B,EAAA,CApDQD,QAAQ;EAAA,QACED,WAAW;AAAA;AAAAqC,EAAA,GADrBpC,QAAQ;AAqDjBqC,EAAE;AAAA,IAAAD,EAAA;AAAAE,YAAA,CAAAF,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}