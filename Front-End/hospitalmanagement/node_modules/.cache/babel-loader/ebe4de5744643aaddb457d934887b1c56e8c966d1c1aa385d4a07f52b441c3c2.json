{"ast":null,"code":"var _jsxFileName = \"C:\\\\Kanini Software Solutions\\\\React(BigBang)\\\\Front-End\\\\hospitalmanagement\\\\src\\\\Component\\\\Approval\\\\AdminApproval.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Variables } from '../Variable';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport './Approval.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminApproval() {\n  _s();\n  const [registers, setRegisters] = useState([]);\n  useEffect(() => {\n    fetchItems();\n  }, []);\n  const fetchItems = () => {\n    axios.get(Variables.API_URL + 'Users').then(response => {\n      if (response.status === 200) {\n        setRegisters(response.data);\n      } else {\n        throw new Error('Failed to fetch registers');\n      }\n    }).catch(error => {\n      console.error('Error fetching registers:', error);\n      toast.error('Error fetching registers:', error.message);\n    });\n  };\n  const handleAccept = (registerId, currentStatus) => {\n    const updatedStatus = 'approved';\n\n    // Assign the fields to variables\n    const {\n      id,\n      name,\n      email,\n      password,\n      role,\n      phone,\n      country,\n      address,\n      gender,\n      specialization\n    } = registers.find(register => register.id === registerId);\n\n    // Update the status in the database\n    axios.put(Variables.API_URL + `Users/${registerId}`, {\n      id,\n      name,\n      email,\n      password,\n      role,\n      phone,\n      country,\n      address,\n      gender,\n      specialization,\n      status: updatedStatus\n    }).then(response => {\n      // Handle successful update\n      console.log('Status updated successfully');\n      // You can also update the local state if needed\n      // Example: Update the status locally\n      const updatedRegisters = registers.map(register => {\n        if (register.id === registerId) {\n          return {\n            ...register,\n            status: updatedStatus\n          };\n        }\n        return register;\n      });\n      setRegisters(updatedRegisters);\n    }).catch(error => {\n      console.error('Error updating status:', error);\n      toast.error('Error updating status:', error.message);\n    });\n  };\n  const handleReject = (registerId, currentStatus) => {\n    const updatedStatus = 'rejected';\n\n    // Assign the fields to variables\n    const {\n      id,\n      name,\n      email,\n      password,\n      role,\n      phone,\n      country,\n      address,\n      gender,\n      specialization\n    } = registers.find(register => register.id === registerId);\n\n    // Update the status in the database\n    axios.put(Variables.API_URL + `Users/${registerId}`, {\n      id,\n      name,\n      email,\n      password,\n      role,\n      phone,\n      country,\n      address,\n      gender,\n      specialization,\n      status: updatedStatus\n    }).then(response => {\n      // Handle successful update\n      console.log('Status updated successfully');\n      // You can also update the local state if needed\n      // Example: Update the status locally\n      const updatedRegisters = registers.map(register => {\n        if (register.id === registerId) {\n          return {\n            ...register,\n            status: updatedStatus\n          };\n        }\n        return register;\n      });\n      setRegisters(updatedRegisters);\n    }).catch(error => {\n      console.error('Error updating status:', error);\n      toast.error('Error updating status:', error.message);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"approval-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: registers.map((register, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-4 mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          className: `card ${index % 4 === 0 ? 'first-card' : ''}`,\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: [\"Name: \", register.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Role: \", register.role]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Specialization: \", register.specialization]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Gender: \", register.gender]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Status: \", register.status]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"button-container\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                className: \"accept-button\",\n                onClick: () => handleAccept(register.id),\n                children: \"Accept\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(Button, {\n                className: \"reject-button\",\n                onClick: () => handleReject(register.id),\n                children: \"Reject\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, register.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminApproval, \"j8dxXsIsDtQQXPk69Vgwmtay3Yc=\");\n_c = AdminApproval;\nexport default AdminApproval;\nvar _c;\n$RefreshReg$(_c, \"AdminApproval\");","map":{"version":3,"names":["React","useEffect","useState","axios","Variables","toast","Card","Button","jsxDEV","_jsxDEV","AdminApproval","_s","registers","setRegisters","fetchItems","get","API_URL","then","response","status","data","Error","catch","error","console","message","handleAccept","registerId","currentStatus","updatedStatus","id","name","email","password","role","phone","country","address","gender","specialization","find","register","put","log","updatedRegisters","map","handleReject","className","children","index","Body","Title","fileName","_jsxFileName","lineNumber","columnNumber","Text","onClick","_c","$RefreshReg$"],"sources":["C:/Kanini Software Solutions/React(BigBang)/Front-End/hospitalmanagement/src/Component/Approval/AdminApproval.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Variables } from '../Variable';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './Approval.css';\r\n\r\nfunction AdminApproval() {\r\n  const [registers, setRegisters] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  const fetchItems = () => {\r\n    axios\r\n      .get(Variables.API_URL + 'Users')\r\n      .then((response) => {\r\n        if (response.status === 200) {\r\n          setRegisters(response.data);\r\n        } else {\r\n          throw new Error('Failed to fetch registers');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching registers:', error);\r\n        toast.error('Error fetching registers:', error.message);\r\n      });\r\n  };\r\n\r\n  const handleAccept = (registerId, currentStatus) => {\r\n    const updatedStatus = 'approved';\r\n\r\n    // Assign the fields to variables\r\n    const { id, name, email, password, role, phone, country, address, gender, specialization } = registers.find(register => register.id === registerId);\r\n\r\n    // Update the status in the database\r\n    axios\r\n      .put(Variables.API_URL + `Users/${registerId}`, { id, name, email, password, role, phone, country, address, gender, specialization, status: updatedStatus })\r\n      .then((response) => {\r\n        // Handle successful update\r\n        console.log('Status updated successfully');\r\n        // You can also update the local state if needed\r\n        // Example: Update the status locally\r\n        const updatedRegisters = registers.map((register) => {\r\n          if (register.id === registerId) {\r\n            return { ...register, status: updatedStatus };\r\n          }\r\n          return register;\r\n        });\r\n        setRegisters(updatedRegisters);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error updating status:', error);\r\n        toast.error('Error updating status:', error.message);\r\n      });\r\n  };\r\n\r\n  const handleReject = (registerId, currentStatus) => {\r\n    const updatedStatus = 'rejected';\r\n\r\n    // Assign the fields to variables\r\n    const { id, name, email, password, role, phone, country, address, gender, specialization } = registers.find(register => register.id === registerId);\r\n\r\n    // Update the status in the database\r\n    axios\r\n      .put(Variables.API_URL + `Users/${registerId}`, { id, name, email, password, role, phone, country, address, gender, specialization, status: updatedStatus })\r\n      .then((response) => {\r\n        // Handle successful update\r\n        console.log('Status updated successfully');\r\n        // You can also update the local state if needed\r\n        // Example: Update the status locally\r\n        const updatedRegisters = registers.map((register) => {\r\n          if (register.id === registerId) {\r\n            return { ...register, status: updatedStatus };\r\n          }\r\n          return register;\r\n        });\r\n        setRegisters(updatedRegisters);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error updating status:', error);\r\n        toast.error('Error updating status:', error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"approval-container\">\r\n      <div className=\"row\">\r\n        {registers.map((register, index) => (\r\n          <div key={register.id} className=\"col-md-4 mb-4\">\r\n            <Card className={`card ${index % 4 === 0 ? 'first-card' : ''}`}>\r\n              <Card.Body>\r\n                <Card.Title>Name: {register.name}</Card.Title>\r\n                <Card.Text>Role: {register.role}</Card.Text>\r\n                <Card.Text>Specialization: {register.specialization}</Card.Text>\r\n                <Card.Text>Gender: {register.gender}</Card.Text>\r\n                <Card.Text>Status: {register.status}</Card.Text>\r\n                <div className=\"button-container\">\r\n                  <Button className=\"accept-button\" onClick={() => handleAccept(register.id)}>\r\n                    Accept\r\n                  </Button>&nbsp;\r\n                  <Button className=\"reject-button\" onClick={() => handleReject(register.id)}>\r\n                    Reject\r\n                  </Button>\r\n                </div>\r\n              </Card.Body>\r\n            </Card>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminApproval;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}